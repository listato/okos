var tom_thumb_new_width = 128;
var tom_thumb_new_height = 24;
var tom_thumb_new_bits = [
   0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
   0x77, 0x77, 0x77, 0x77, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
   0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x75, 0x55, 0x55, 0x55, 0x55,
   0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x75,
   0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
   0x55, 0x55, 0x55, 0x75, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
   0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x20, 0x55, 0x16, 0x23, 0x14, 0x05, 0x00, 0x40, 0x26, 0x33, 0x75, 0x76,
   0x77, 0x00, 0x04, 0x71, 0x20, 0x75, 0x43, 0x23, 0x22, 0x22, 0x00, 0x40,
   0x35, 0x44, 0x15, 0x41, 0x55, 0x22, 0x72, 0x42, 0x20, 0x50, 0x26, 0x07,
   0x22, 0x75, 0x70, 0x20, 0x25, 0x22, 0x37, 0x27, 0x77, 0x00, 0x01, 0x24,
   0x00, 0x70, 0x13, 0x05, 0x22, 0x20, 0x02, 0x10, 0x25, 0x41, 0x44, 0x15,
   0x45, 0x22, 0x72, 0x02, 0x20, 0x50, 0x42, 0x06, 0x14, 0x00, 0x01, 0x12,
   0x23, 0x37, 0x34, 0x17, 0x37, 0x10, 0x04, 0x21, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x22, 0x63, 0x73, 0x67, 0x75, 0x54, 0x51, 0x25, 0x23, 0x63, 0x57, 0x55,
   0x55, 0x77, 0x70, 0x02, 0x55, 0x15, 0x15, 0x11, 0x25, 0x54, 0x71, 0x57,
   0x55, 0x15, 0x52, 0x55, 0x55, 0x14, 0x41, 0x05, 0x77, 0x13, 0x75, 0x77,
   0x27, 0x34, 0x71, 0x57, 0x53, 0x27, 0x52, 0x75, 0x22, 0x12, 0x42, 0x00,
   0x51, 0x15, 0x15, 0x51, 0x25, 0x55, 0x51, 0x57, 0x71, 0x43, 0x52, 0x72,
   0x25, 0x11, 0x44, 0x00, 0x56, 0x63, 0x73, 0x61, 0x75, 0x52, 0x57, 0x25,
   0x61, 0x35, 0x62, 0x52, 0x25, 0x77, 0x70, 0x70, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x01, 0x01, 0x04, 0x04, 0x21, 0x10, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00,
   0x00, 0x60, 0x32, 0x76, 0x32, 0x63, 0x66, 0x62, 0x03, 0x54, 0x72, 0x23,
   0x63, 0x66, 0x57, 0x55, 0x55, 0x27, 0x22, 0x73, 0x60, 0x15, 0x55, 0x57,
   0x25, 0x30, 0x72, 0x55, 0x55, 0x31, 0x52, 0x75, 0x52, 0x16, 0x40, 0x70,
   0x50, 0x15, 0x35, 0x72, 0x25, 0x34, 0x72, 0x55, 0x55, 0x61, 0x52, 0x77,
   0x62, 0x23, 0x22, 0x70, 0x70, 0x63, 0x66, 0x42, 0x25, 0x55, 0x57, 0x25,
   0x63, 0x31, 0x66, 0x72, 0x45, 0x67, 0x32, 0x70, 0x00, 0x00, 0x00, 0x20,
   0x00, 0x02, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00 ];


function getPixel(x,y) {
   var i = Math.floor(x / 8) + y * 16;
   var b = x % 8;
   // console.log("x",x, "y", y, "i", i, "b", b);

   return (tom_thumb_new_bits[i]>>b) & 0x1;
}

function getChar(c) {
   var col = (c % 32);
   var row = Math.floor(c/32);

   // console.log(row, col);
   // var line = "";

   // var pixels = [];
   // for (var y = 0; y < 5; y++) {
   //    var p = [];
   //    for (var x = 0; x < 3; x++) {
   //       var dx = col*4 + x;
   //       var dy = row*6 + y;

   //       p.push(getPixel(dx, dy));
   //       line += getPixel(dx, dy) ? "#" : " ";
   //    }
   //    pixels.push(p);
   //    line += "\n";
   // }

   // console.log(c, pixels);
   // console.log(line);

   var pixels = 0x00;
   var b = 0;
   for (var x = 0; x < 3; x++) {
      for (var y = 0; y < 5; y++) {
         //TODO special case a few dropped chars, shift them up a bit
         var dx = col*4 + x;
         var dy = row*6 + y;

         pixels |= getPixel(dx, dy)<<b++;
      }
   }

   // console.log(c, "" + pixels.toString(16));
   return pixels;
}

function printFontTable() {

   for (var i = 32; i < 128; i++) {
      var pixel = getChar(i);
      var upper = ( "00" + (pixel >> 8).toString(16)).substr(-2);
      var lower = ( "00" + (pixel & 0xff).toString(16)).substr(-2);

      var hex = ("0000" + getChar(i).toString(16)).substr(-4);
      console.log("db\t0x" + upper + ",0x" + lower + "\t;" + i + " '" + String.fromCodePoint(i) + "'");
   }
}
printFontTable();

// testDraw();

// for (var y = 12; y < 12+5; y++)
//    for (var x = 4; x < 8; x++)
//       console.log(x +"," +y + "=" + getPixel(x,y));


/*

screen memory is 128 segments x 8 rows. each segment is 8 bits of sub-rows

*/


function hexByte(b) {
   return ("00" + b.toString(16)).substr(-2);
}


function testDraw() {
   //test screen size
   var w = 16;
   var h = 64;
   var segments = w;
   var rows = h/8;

   var display = [];

   var chars = [
      [65, 66, 67, 68],
      [69, 70, 71, 72],
      [73, 74, 75, 76],
      [77, 78, 79, 80],
      [65, 66, 67, 68],
      [69, 70, 71, 72],
      [73, 74, 75, 76],
      [77, 78, 79, 80],
      [65, 66, 67, 68],
      [69, 70, 71, 72]
   ];

   function getCharSegment(row,col, segment) {
      var pixels = getChar(chars[row][col]);
      if (segment == 0)
         return pixels & 0x1f;
      else if (segment == 1)
         return (pixels & 0x03e0)>>5;
      else
         return pixels & 0x7c00>>10
   }

   var row = 0;
   var segment = 0;
   var yOffset = 0;
   var rowC = 0;

   for (var row = 0; row < rows; row++) {






      // //0
      //    draw0
      //    draw6
      // //1
      //    drawn2
      //    draw4
      // //2
      //    drawn4
         // draw2

      // 0, 2, 4 up shift
      // 6 - 0, 6 - 2, 6 - 3, down shift



      nextYOffset = (yOffset + 6) %8;

      var cr1 = row + row>>2; //char row skips every 4th row 

      for (var segment = 0; segment < segments; segment++) {
         var col = segment>>2;
         var cSegment = segment & 0x3;
         //skip every 4th column, these are spaces between chars
         if (cSegment == 0x03) {
            console.log("blank");
            continue;
         }

         var c1Pixels = getCharSegment(cr1, col, cSegment);
         var c2Pixels = getCharSegment(cr1+1, col, cSegment);

         var segmentPixels = (c1Pixels>>(rowC*2)) | (c2Pixels<<(6-rowC*2));

         console.log(segment, row, hexByte(c1Pixels), hexByte(c2Pixels), hexByte(segmentPixels));

      }
      yOffset = nextYOffset;
      rowC = (rowC + 1) % 3;

   }



}


